{% comment %}
  A custom product form that supports bundle configuration
  - Allows selecting bundle items
  - Handles quantity updates
  - Manages bundle pricing
{% endcomment %}

{%- assign product_form_id = 'product-form-' | append: section.id -%}

<div class="bundle-product-form" data-product-handle="{{ product.handle }}">
  {%- form 'product', product, id: product_form_id, class: 'form', novalidate: 'novalidate', data-type: 'add-to-cart-form' -%}
    <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
    
    <div class="bundle-items" data-bundle-items>
      {% comment %} Bundle items will be dynamically populated here {% endcomment %}
    </div>

    <div class="bundle-summary">
      <div class="bundle-total">
        Total: <span data-bundle-total>{{ product.selected_or_first_available_variant.price | money }}</span>
      </div>
    </div>

    <div class="quantity">
      <label for="Quantity-{{ section.id }}">Quantity</label>
      <input
        type="number"
        name="quantity"
        id="Quantity-{{ section.id }}"
        value="1"
        min="1"
        data-bundle-quantity
      >
    </div>

    <div class="bundle-submit">
      <button
        type="submit"
        name="add"
        class="bundle-add-button"
        {% if product.selected_or_first_available_variant.available == false %}disabled{% endif %}
        data-bundle-submit
      >
        <span>
          {%- if product.selected_or_first_available_variant.available -%}
            Add bundle to cart
          {%- else -%}
            Sold out
          {%- endif -%}
        </span>
      </button>
    </div>

    {% comment %} Hidden input for bundle configuration {% endcomment %}
    <input 
      type="hidden" 
      name="attributes[bundle_items]" 
      data-bundle-config
    >
  {%- endform -%}
</div>

<script>

class BundleProduct {
  constructor(container) {
    this.container = container;
    this.productHandle = container.dataset.productHandle;
    this.form = container.querySelector('form');
    this.bundleItemsContainer = container.querySelector('[data-bundle-items]');
    this.bundleConfigInput = container.querySelector('[data-bundle-config]');
    this.bundleTotalElement = container.querySelector('[data-bundle-total]');
    this.quantityInput = container.querySelector('[data-bundle-quantity]');

    this.bundleItems = [];
    this.init();
  }

  async init() {
    await this.loadProductData();
    this.setupEventListeners();
    this.render();
  }

  async loadProductData() {
    try {
      // Load the main product data
      const response = await fetch(`/products/${this.productHandle}.js`);
      this.product = await response.json();

      // Load bundle items data (you'll need to set this up in your theme settings or metafields)
      this.bundleItems = await this.loadBundleItems();
      
      this.updateBundleConfiguration();
    } catch (error) {
      console.error('Error loading product data:', error);
    }
  }

  async loadBundleItems() {
    // This is an example - you should modify this to load your bundle items
    // You could load this from theme settings, metafields, or a custom endpoint
    const bundleItemHandles = [
      {% for item in product.metafields.design.your_own.value %}
          '{{ item.handle }}'{% unless forloop.last %},{% endunless %}
        {% endfor %}
    ];

    const items = await Promise.all(
      bundleItemHandles.map(async handle => {
        const response = await fetch(`/products/${handle}.js`);
        const product = await response.json();
        return {
          variantId: product.variants[0].id,
          title: product.title,
          price: product.variants[0].price,
          image: product.featured_image,
          quantity: 1
        };
      })
    );

    return items;
  }

  setupEventListeners() {
    // Handle quantity changes for bundle items
    this.bundleItemsContainer.addEventListener('change', event => {
      if (event.target.matches('.bundle-item-quantity')) {
        const itemIndex = parseInt(event.target.dataset.itemIndex);
        this.bundleItems[itemIndex].quantity = parseInt(event.target.value);
        this.updateBundleConfiguration();
        this.updateTotalPrice();
      }
    });

    // Handle form submission
    this.form.addEventListener('submit', this.handleSubmit.bind(this));

    // Handle main quantity changes
    this.quantityInput.addEventListener('change', () => {
      this.updateBundleConfiguration();
      this.updateTotalPrice();
    });
  }

  updateBundleConfiguration() {
    const config = this.bundleItems.map(item => ({
      variantId: item.variantId.toString(),
      quantity: item.quantity,
      price: item.price / 100 // Convert cents to dollars
    }));

    this.bundleConfigInput.value = JSON.stringify(config);
  }

  updateTotalPrice() {
    const basePrice = this.calculateBasePrice();
    const quantity = parseInt(this.quantityInput.value);
    const total = basePrice * quantity;

    this.bundleTotalElement.textContent = this.formatMoney(total);
  }

  calculateBasePrice() {
    return this.bundleItems.reduce((total, item) => {
      return total + (item.price * item.quantity);
    }, 0);
  }

  formatMoney(cents) {
    return (cents / 100).toLocaleString('en-US', {
      style: 'currency',
      currency: 'USD'
    });
  }

  render() {
    this.bundleItemsContainer.innerHTML = this.bundleItems.map((item, index) => `
      <div class="bundle-item">
        <img 
          class="bundle-item-image" 
          src="${item.image}"
          alt="${item.title}"
        >
        <div class="bundle-item-details">
          <div class="bundle-item-title">${item.title}</div>
          <div class="bundle-item-price">${this.formatMoney(item.price)}</div>
        </div>
        <input
          type="number"
          class="bundle-item-quantity"
          value="${item.quantity}"
          min="0"
          data-item-index="${index}"
        >
      </div>
    `).join('');

    this.updateTotalPrice();
  }

  async handleSubmit(event) {
    event.preventDefault();

    const formData = new FormData(this.form);
    const quantity = parseInt(formData.get('quantity'));
    const variantId = formData.get('id');

    try {
      // Add the main product to cart with bundle configuration
      // Generate a unique bundle ID
      const bundleId = Date.now().toString();
      
      // Get bundle items
      const bundleItems = JSON.parse(this.bundleConfigInput.value);
      
      // Add all items with the same bundle ID
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: bundleItems.map(item => ({
            id: parseInt(item.variantId), // Make sure this is a number
            quantity: item.quantity * quantity,
            properties: {
              '_time': bundleId,
              '_bundle': 'true'
            }
          }))
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('Cart add error:', errorData);
        throw new Error(errorData.message || 'Failed to add bundle to cart');
      }

      const result = await response.json();
      console.log('Bundle added successfully:', result);

      // Handle successful addition (you can customize this)
      window.location.href = '/cart';
    } catch (error) {
      console.error('Error adding bundle to cart:', error);
      // Handle error (you can customize this)
      alert('There was an error adding the bundle to cart. Please try again.');
    }
  }
}

// Initialize bundle product forms
document.addEventListener('DOMContentLoaded', () => {
  const bundleForms = document.querySelectorAll('.bundle-product-form');
  bundleForms.forEach(form => new BundleProduct(form));
});

</script>

{% schema %}
{
  "name": "Bundle Product Form",
  "settings": [
    {
      "type": "product_list",
      "id": "bundle_products",
      "label": "Bundle Products",
      "info": "Select products that can be added to bundles"
    }
  ],
"presets": [
    {
      "name": "Main product bundle",
      "category": "Demo"
    }
  ]
}
{% endschema %}

<style>
.bundle-product-form {
  margin: 20px 0;
}

.bundle-items {
  margin-bottom: 20px;
}

.bundle-item {
  display: flex;
  align-items: center;
  gap: 20px;
  padding: 10px;
  border-bottom: 1px solid #ddd;
}

.bundle-item-image {
  width: 80px;
  height: 80px;
  object-fit: cover;
}

.bundle-item-details {
  flex-grow: 1;
}

.bundle-item-title {
  font-weight: bold;
  margin-bottom: 5px;
}

.bundle-item-price {
  color: #666;
}

.bundle-item-quantity {
  width: 60px;
  padding: 5px;
}

.bundle-summary {
  margin: 20px 0;
  padding: 15px;
  background: #f5f5f5;
  border-radius: 4px;
}

.bundle-total {
  font-size: 1.2em;
  font-weight: bold;
  text-align: right;
}

.quantity {
  margin-bottom: 20px;
}

.bundle-add-button {
  width: 100%;
  padding: 15px;
  background: #000;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.bundle-add-button:disabled {
  background: #ccc;
  cursor: not-allowed;
}
</style>